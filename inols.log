






Started logging.

<<<
Content-Length: 3081

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":32,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ILVZ\\Documents\\Arduino\\PJON_Base_Home0401","rootUri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","name":"PJON_Base_Home0401"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 10284

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino","languageId":"cpp","version":1,"text":"/*\r\n   I2C (A4 - SDA, A5 - SCL)\r\n   DS3231 BMP180\r\n\r\n   LCD 1602 4-Pin\r\n   D4-D7 -> D4 - D7\r\n   D8 RS\r\n   D9 E\r\n   D10 Light\r\n\r\n   D12 PJON-Line\r\n*/\r\n#define FOR_i(from, to) for(int i = (from); i < (to); i++)\r\n#define FOR(x, from, to) for (int (x) = (from); (x) < (to); (x)++)\r\n//===========================\r\n#define EVERY_MS(x) \\\r\n  static uint32_t tmr;\\\r\n  bool flag = millis() - tmr >= (x);\\\r\n  if (flag) tmr += (x);\\\r\n  if (flag)\r\n//===========================\r\n\r\n#define BARIER_PIN 3\r\n#define BEEP_PIN   12\r\n#include<Streaming.h>\r\n//                                                                     ---------- Timestamp ----------\r\n#include \"timestamp32bits.h\"\r\ntimestamp32bits stamp = timestamp32bits();\r\n//                                                                     ---------- LiquidCrystal ----------\r\n#include <LiquidCrystal.h>\r\nconst int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n//                                                                     ---------- 18B20 ----------\r\n#include <microDS18B20.h>\r\n#define SENSOR1_PIN 16   // пины для термометров\r\nMicroDS18B20 sensor1(SENSOR1_PIN);  // Создаем термометры без адресации\r\n\r\n#include <Wire.h>\r\n//                                                                     ---------- BMP085 ----------\r\n#include <BMP085.h>\r\nBMP085 bmp085 = BMP085();\r\nfloat Temperature18B20;\r\nint32_t Temperature = 0,\r\n        Pressure = 0,\r\n        Altitude = 0;\r\nint32_t buff[10],\r\n        avg_alt;\r\n//                                                                     ---------- 1DS3231 ----------\r\n#include <DS3231_Simple.h>\r\nDS3231_Simple Clock;\r\nDateTime MyDateAndTime;\r\nfloat MyFloatTemperature;\r\n\r\n//                                                                     ---------- PJON ----------\r\n#define PJON_PIN 15\r\n// АДРЕСА В СЕТИ СВОЙ И ГЛАВНЫЙ\r\n#define MAIN_DEV_ADR 10\r\n\r\n#define TEPL_DEV_ADR 15\r\n#define TEPL_DEV_ADR_DUBLE 16\r\n\r\n#define BARIER_DEV_ADR 20\r\n\r\n#include <PJONSoftwareBitBang.h>\r\n\r\nPJONSoftwareBitBang bus(MAIN_DEV_ADR);\r\n\r\nstruct {// Структурав для передачи времени по сети\r\n  char id;\r\n  uint32_t UTS;\r\n}  now_time;\r\n\r\nstruct {// Структура СОСТОЯНИЕ ТЕПЛИЦЫ\r\n  const char id = 'T';\r\n  int temperature1;\r\n  int temperature2;\r\n  int temperature3;\r\n  int hmd1;\r\n  int hmd2;\r\n  int hmd3;\r\n  char state = 'N';\r\n}  Teplica;\r\n//-----------------------------------------------------------\r\nstruct {\r\n  uint8_t f = 0;\r\n  uint8_t count = 0;\r\n  uint8_t numPattern = 0;\r\n  uint16_t pattern[4] = {0B1101101010101101,\r\n                         0B1010101010101010,\r\n                         0B1001010010010100,\r\n                         0B0000000010101010\r\n                        };\r\n\r\n} Sbeep;\r\nuint32_t beepTimer;\r\nuint32_t time;\r\nbyte barierF;\r\n\r\nint8_t beep(int8_t);\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- SETUP ---------\r\n//-----------------------------------------------------------------------------------------------\r\nvoid setup() {\r\n  //barierF = \"abcd\"[3];\r\n  pinMode(BARIER_PIN,INPUT_PULLUP );\r\n  pinMode(BEEP_PIN, OUTPUT);\r\n  PJON_init();\r\n\r\n  Wire.begin();\r\n  delay(500);\r\n  bmp085.init();\r\n\r\n  Clock.begin();\r\n\r\n  Serial.begin(115200);\r\n  // LCD LightЗшт\r\n  digitalWrite(10, 100);\r\n  lcd.begin(16, 2);\r\n\r\n  sensor1.setResolution(12);\r\n  sensor1.requestTemp();\r\n  time = millis() + 1000;\r\n  beep(0);\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- LOOP ----------\r\n//-----------------------------------------------------------------------------------------------\r\n#define PERIOD 10000\r\nuint32_t testTime;\r\nvoid loop() {\r\n  { //\r\n    EVERY_MS(PERIOD) {\r\n      Temperature18B20 = sensor1.getTemp();\r\n      // Запрашиваем преобразование температуры\r\n      sensor1.requestTemp();\r\n      testTime = micros();\r\n\r\n      bmp085.getPressure(&Pressure);\r\n\r\n      testTime = micros() - testTime;\r\n\r\n      MyDateAndTime = Clock.read();\r\n      MyFloatTemperature   = Clock.getTemperatureFloat();\r\n      //-------------------------------------------------------------------------------\r\n      TimeMeteoToLCD();\r\n    }\r\n  }\r\n  //\r\n  {\r\n#define BARIER_PERIOD 50\r\n#define TRESHOLD 4\r\n EVERY_MS(BARIER_PERIOD) {\r\n      testBarier();\r\n    }\r\n  }\r\n  // Музыкальный автомат\r\n  playBeep();\r\n\r\n  bus.update();\r\n  bus.receive(1000);\r\n}\r\n/*\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n*/\r\nvoid TimeMeteoToLCD()\r\n{\r\n  // TIME\r\n  lcd.setCursor(0, 0);\r\n  LCD2Digit(MyDateAndTime.Hour);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Minute);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Second);\r\n\r\n  lcd.setCursor(11, 0);\r\n  if (Temperature18B20 < 10) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print(Temperature18B20 + 0.05, 1);\r\n  lcd.print(\"C\");\r\n\r\n  lcd.setCursor(0, 1);\r\n  lcd.println(\"   Hp   s      \");\r\n  lcd.setCursor(0, 1);\r\n  lcd.print(Pressure / 100);\r\n\r\n  lcd.setCursor(9, 1);\r\n  lcd.print(Teplica.state);\r\n\r\n  lcd.setCursor(11, 1);\r\n  if (Teplica.temperature1 < 100) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print((float)Teplica.temperature1 / 10, 1);\r\n  lcd.print(\"C\");\r\n\r\n}\r\n/*\r\n// Опрашиваем с частотой периода\r\nstatic bool flag = true/false;\r\nstatic uint32_t tmr;\r\nif(state && flag && millis() - tmr > PERIOD)\r\n{\r\n  flag = false;\r\n  tmr = millis();\r\n}\r\n*/\r\nvoid testBarier() {\r\n  static byte barierTst = 0;\r\n//------------------------------------------------------------------------------------------\r\nstatic uint32_t tmr;\r\nif(millis() - tmr > BARIER_PERIOD) {\r\n  tmr = millis();\r\n  if(digitalRead(BARIER_PIN) && barierF == false) {\r\n    if(++barierTst >= TRESHOLD){\r\n      barierF = true;\r\n      barierTst = 0;\r\n       Serial.print(\"#\");\r\n       beep(1);\r\n       Serial.print(\"#\");\r\n    }\r\n  }\r\n  if(!digitalRead(BARIER_PIN) && barierTst) {\r\n    --barierTst;\r\n  }\r\n}\r\n//------------------------------------------------------------------------------------------\r\n/*\r\n  if (digitalRead(BARIER_PIN) == 0);\r\n  if (digitalRead(BARIER_PIN) == 1  && barierTst < TRESHOLD) {\r\n    ++barierTst;\r\n }\r\n  if (digitalRead(BARIER_PIN) == 0 && barierTst > 1) {\r\n    --barierTst;\r\n  }\r\n  if (barierTst >= TRESHOLD && barierF == 0) {\r\n    barierF = 1;\r\n    beep(0);\r\n     Serial.print(\"#\");\r\n  }\r\n*/  \r\n}\r\n\r\nvoid PJON_init() {\r\n  bus.set_receiver(receiver_function);\r\n  bus.strategy.set_pin(PJON_PIN);\r\n  bus.begin();\r\n  //\r\n  Serial.print(\"PJON - Sender's device id: \");\r\n  Serial.print(bus.device_id());\r\n  Serial.println(\" DS18B20 tempC cyclical record sending...\");\r\n};\r\n/****************************************\r\n    ПП ЧТЕНИЯ ДАННЫХ ИЗ СЕТИ PJON\r\n ****************************************/\r\nvoid receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &info) {\r\n  switch ((char)payload[0]) {\r\n    case 'R': {\r\n        now_time.UTS = stamp.timestamp(MyDateAndTime.Year, MyDateAndTime.Month, MyDateAndTime.Day, MyDateAndTime.Hour, MyDateAndTime.Minute, MyDateAndTime.Second);\r\n        bus.reply(&now_time, sizeof(now_time));\r\n        Serial.println(\"Request Time\");\r\n        Serial.print(\" Time Sinhronization from UTS   \");\r\n        Serial.print(now_time.UTS);\r\n        Serial.println();\r\n        break;\r\n      }\r\n\r\n    case 'T': {\r\n        memcpy(&Teplica, payload, sizeof(Teplica));\r\n        Serial << endl << \"Teplica_temp \" << (float)Teplica.temperature1 / 10 << \" state \" << Teplica.state << endl;\r\n        break;\r\n      }\r\n\r\n    default:\r\n      Serial.print(\"TX id: \");\r\n      Serial.print(info.tx.id);\r\n      Serial.print(\" RX id: \");\r\n      Serial.print(info.rx.id);\r\n      Serial.print(\" Payload[0] = \");\r\n      Serial.println((char)payload[0]);\r\n      //      Serial << \" | TX id:   MAIN_DEV_ADR \" << info.tx.id << \"\\n\";\r\n      break;\r\n  }\r\n\r\n  //  memcpy(&now_time, payload, sizeof(now_time));\r\n}\r\n\r\nvoid LCD2Digit(int d) {\r\n  if (d < 10) {\r\n    lcd.print(\"0\");\r\n  }\r\n\r\n  lcd.print(d);\r\n}\r\n\r\nvoid serial2Digit(int d) {\r\n  //Serial << (d < 10 ? \"0\" : \"\") << d;\r\n  if (d < 10) {\r\n    Serial.print(\"0\");\r\n  }\r\n\r\n  Serial.print(d);\r\n};\r\n\r\nint8_t beep(int8_t sp = 0) {\r\n  if (Sbeep.count)\r\n  {\r\n    return Sbeep.count;\r\n  }\r\n  else {\r\n    Sbeep.count = 16;\r\n    Sbeep.numPattern = sp;\r\n    Sbeep.f = 1;\r\n    return 0;\r\n  }\r\n};\r\n\r\nvoid playBeep() {\r\n  if (millis() >= beepTimer && Sbeep.f) {\r\n    beepTimer = millis() + 100;\r\n\r\n    if (Sbeep.count--) {\r\n      if ((Sbeep.pattern[Sbeep.numPattern] >> Sbeep.count) & 1)\r\n      {\r\n        digitalWrite(BEEP_PIN, 1);\r\n        Serial.print(\"+\");\r\n      }\r\n      else\r\n      {\r\n        digitalWrite(BEEP_PIN, 0);\r\n        Serial.print(\"-\");\r\n      }\r\n    } else {\r\n      barierF = false;\r\n      Sbeep.count = Sbeep.f = 0;  // Счётчик тактов пуст. Отыграли своё\r\n      digitalWrite(BEEP_PIN, 0);\r\n     Serial.println(\"=\");\r\n    }\r\n  }\r\n}\r\n"}}}Content-Length: 450

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/hlam.ino","languageId":"cpp","version":1,"text":"/*\r\n\r\nstruct WR_record\r\n{\r\n  uint32_t id;\r\n  uint8_t year,\r\n          month,\r\n          date,\r\n          hour,\r\n          min,\r\n          sec;\r\n  int32_t pressure,\r\n          temp_bmp180,\r\n          tempC;\r\n};\r\n* \r\n */\r\n"}}}Content-Length: 282

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 268

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/hlam.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3083

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":5620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ILVZ\\Documents\\Arduino\\PJON_Base_Home0401","rootUri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","name":"PJON_Base_Home0401"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 10626

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino","languageId":"cpp","version":1,"text":"/*\r\n   I2C (A4 - SDA, A5 - SCL)\r\n   DS3231 BMP180\r\n\r\n   LCD 1602 4-Pin\r\n   D4-D7 -> D4 - D7\r\n   D8 RS\r\n   D9 E\r\n   D10 Light\r\n\r\n   D12 PJON-Line\r\n*/\r\n#define FOR_i(from, to) for(int i = (from); i < (to); i++)\r\n#define FOR(x, from, to) for (int (x) = (from); (x) < (to); (x)++)\r\n//===========================\r\n#define EVERY_MS(x) \\\r\n  static uint32_t tmr;\\\r\n  bool flag = millis() - tmr >= (x);\\\r\n  if (flag) tmr += (x);\\\r\n  if (flag)\r\n//===========================\r\n\r\n#define BARIER_PIN 3\r\n#define BEEP_PIN   12\r\n#include<Streaming.h>\r\n//\r\n#include <RCSwitch.h>\r\nRCSwitch mySwitch = RCSwitch();\r\n//                                                                     ---------- Timestamp ----------\r\n#include \"timestamp32bits.h\"\r\ntimestamp32bits stamp = timestamp32bits();\r\n//                                                                     ---------- LiquidCrystal ----------\r\n#include <LiquidCrystal.h>\r\nconst int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n//                                                                     ---------- 18B20 ----------\r\n#include <microDS18B20.h>\r\n#define SENSOR1_PIN 16   // пины для термометров\r\nMicroDS18B20 sensor1(SENSOR1_PIN);  // Создаем термометры без адресации\r\n\r\n#include <Wire.h>\r\n//                                                                     ---------- BMP085 ----------\r\n#include <BMP085.h>\r\nBMP085 bmp085 = BMP085();\r\nfloat Temperature18B20;\r\nint32_t Temperature = 0,\r\n        Pressure = 0,\r\n        Altitude = 0;\r\nint32_t buff[10],\r\n        avg_alt;\r\n//                                                                     ---------- 1DS3231 ----------\r\n#include <DS3231_Simple.h>\r\nDS3231_Simple Clock;\r\nDateTime MyDateAndTime;\r\nfloat MyFloatTemperature;\r\n\r\n//                                                                     ---------- PJON ----------\r\n#define PJON_PIN 15\r\n// АДРЕСА В СЕТИ СВОЙ И ГЛАВНЫЙ\r\n#define MAIN_DEV_ADR 10\r\n\r\n#define TEPL_DEV_ADR 15\r\n#define TEPL_DEV_ADR_DUBLE 16\r\n\r\n#define BARIER_DEV_ADR 20\r\n\r\n#include <PJONSoftwareBitBang.h>\r\n\r\nPJONSoftwareBitBang bus(MAIN_DEV_ADR);\r\n\r\nstruct {// Структурав для передачи времени по сети\r\n  char id;\r\n  uint32_t UTS;\r\n}  now_time;\r\n\r\nstruct {// Структура СОСТОЯНИЕ ТЕПЛИЦЫ\r\n  const char id = 'T';\r\n  int temperature1;\r\n  int temperature2;\r\n  int temperature3;\r\n  int hmd1;\r\n  int hmd2;\r\n  int hmd3;\r\n  char state = 'N';\r\n}  Teplica;\r\n//-----------------------------------------------------------\r\nstruct {\r\n  uint8_t f = 0;\r\n  uint8_t count = 0;\r\n  uint8_t numPattern = 0;\r\n  uint16_t pattern[4] = {0B1101101010101101,\r\n                         0B1010101010101010,\r\n                         0B1001010010010100,\r\n                         0B0000000010101010\r\n                        };\r\n\r\n} Sbeep;\r\nuint32_t beepTimer;\r\nbool barierF;\r\n\r\nint8_t beep(int8_t);\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- SETUP ---------\r\n//-----------------------------------------------------------------------------------------------\r\nvoid setup() {\r\n  pinMode(BARIER_PIN,INPUT_PULLUP );\r\n  pinMode(BEEP_PIN, OUTPUT);\r\n  PJON_init();\r\n\r\n  Wire.begin();\r\n  delay(500);\r\n  bmp085.init();\r\n\r\n  Clock.begin();\r\n\r\n  // LCD LightЗшт\r\n  digitalWrite(10, 100);\r\n  lcd.begin(16, 2);\r\n\r\n  sensor1.setResolution(12);\r\n  sensor1.requestTemp();\r\n\r\n  mySwitch.enableTransmit(11);\r\n  mySwitch.setPulseLength(320);\r\n  mySwitch.setRepeatTransmit(6);\r\n\r\n  Serial.begin(115200);\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- LOOP ----------\r\n//-----------------------------------------------------------------------------------------------\r\n#define PERIOD 10000\r\nvoid loop() {\r\n  { // изолируем в блоке, макрос EVERY_MS\r\n    EVERY_MS(PERIOD) {\r\n      Temperature18B20 = sensor1.getTemp();    \r\n      sensor1.requestTemp();// Запрашиваем преобразование температуры\r\n\r\n      bmp085.getPressure(&Pressure);\r\n\r\n      MyDateAndTime = Clock.read();\r\n      MyFloatTemperature   = Clock.getTemperatureFloat(); // температура в корпусе (кристалл часов)\r\n\r\n      TimeMeteoToLCD();\r\n    }\r\n  }\r\n  //\r\n  {// изолируем в блоке, макрос EVERY_MS\r\n#define BARIER_PERIOD 50 // период опроса барьера\r\n#define TRESHOLD 4 // сколько опросов должны дать положительный результат (200-250 миллисекунд)\r\n EVERY_MS(BARIER_PERIOD) { testBarier(); }\r\n  }\r\n  // Музыкальный автомат\r\n  playBeep();\r\n  // работа с шиной\r\n  bus.update();\r\n  bus.receive(1000);\r\n}\r\n/*\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n*/\r\n/*\r\n// Опрашиваем с частотой периода\r\nstatic bool flag = true/false;\r\nstatic uint32_t tmr;\r\nif(state && flag && millis() - tmr > PERIOD)\r\n{\r\n  flag = false;\r\n  tmr = millis();\r\n}\r\n*/\r\n//---------------------------------------------------------------------------------------------------\r\nvoid testBarier() {\r\n  static byte barierTst = 0;\r\n  static uint32_t tmr;\r\n  if(millis() - tmr > BARIER_PERIOD) {\r\n    tmr = millis();\r\n    if(digitalRead(BARIER_PIN) && barierF == false) {\r\n      if(++barierTst >= TRESHOLD){\r\n        barierF = true;\r\n        barierTst = 0;\r\n        mySwitch.send(15755001, 24);\r\n        beep(1);\r\n      }\r\n    }\r\n    if(!digitalRead(BARIER_PIN)) {\r\n      barierTst = 0;\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid PJON_init() {\r\n  bus.set_receiver(receiver_function);\r\n  bus.strategy.set_pin(PJON_PIN);\r\n  bus.begin();\r\n  //\r\n  Serial.print(\"PJON - Sender's device id: \");\r\n  Serial.print(bus.device_id());\r\n  Serial.println(\" DS18B20 tempC cyclical record sending...\");\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n/****************************************\r\n    ПП ЧТЕНИЯ ДАННЫХ ИЗ СЕТИ PJON\r\n ****************************************/\r\nvoid receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &info) {\r\n  switch ((char)payload[0]) {\r\n    case 'R': {\r\n        now_time.UTS = stamp.timestamp(MyDateAndTime.Year, MyDateAndTime.Month, MyDateAndTime.Day, MyDateAndTime.Hour, MyDateAndTime.Minute, MyDateAndTime.Second);\r\n        bus.reply(&now_time, sizeof(now_time));\r\n        Serial.println(\"Request Time\");\r\n        Serial.print(\" Time Sinhronization from UTS   \");\r\n        Serial.print(now_time.UTS);\r\n        Serial.println();\r\n        break;\r\n      }\r\n\r\n    case 'T': {\r\n        memcpy(&Teplica, payload, sizeof(Teplica));\r\n        Serial << endl << \"Teplica_temp \" << (float)Teplica.temperature1 / 10 << \" state \" << Teplica.state << endl;\r\n        break;\r\n      }\r\n\r\n    default:\r\n      Serial.print(\"TX id: \");\r\n      Serial.print(info.tx.id);\r\n      Serial.print(\" RX id: \");\r\n      Serial.print(info.rx.id);\r\n      Serial.print(\" Payload[0] = \");\r\n      Serial.println((char)payload[0]);\r\n      break;\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid LCD2Digit(int d) {\r\n  if (d < 10) {\r\n    lcd.print(\"0\");\r\n  }\r\n  lcd.print(d);\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid serial2Digit(int d) {\r\n  if (d < 10) {\r\n    Serial.print(\"0\");\r\n  }\r\n  Serial.print(d);\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nint8_t beep(int8_t sp = 0) {\r\n  if (Sbeep.count) {\r\n    return Sbeep.count;\r\n  } else {\r\n    Sbeep.count = 16;\r\n    Sbeep.numPattern = sp;\r\n    Sbeep.f = 1;\r\n    return 0;\r\n  }\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nvoid playBeep() {\r\n  if (millis() >= beepTimer && Sbeep.f) {\r\n    beepTimer = millis() + 100;\r\n\r\n    if (Sbeep.count--) {\r\n      if ((Sbeep.pattern[Sbeep.numPattern] >> Sbeep.count) & 1) {\r\n        digitalWrite(BEEP_PIN, 1);\r\n        Serial.print(\"+\");\r\n      } else {\r\n        digitalWrite(BEEP_PIN, 0);\r\n        Serial.print(\"-\");\r\n      }\r\n    } else {\r\n      barierF = false;\r\n      Sbeep.count = Sbeep.f = 0;  // Счётчик тактов пуст. Отыграли своё\r\n      digitalWrite(BEEP_PIN, 0);\r\n        Serial.println();\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid TimeMeteoToLCD()\r\n{\r\n // line ONE\r\n // TIME\r\n  lcd.setCursor(0, 0);\r\n  LCD2Digit(MyDateAndTime.Hour);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Minute);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Second);\r\n\r\n  lcd.setCursor(11, 0);\r\n  if (Temperature18B20 < 10) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print(Temperature18B20 + 0.05, 1);\r\n  lcd.print(\"C\");\r\n\r\n// line TWO\r\n  lcd.setCursor(0, 1);\r\n  lcd.println(\"   Hp   s      \");\r\n  lcd.setCursor(0, 1);\r\n  lcd.print(Pressure / 100);\r\n\r\n  lcd.setCursor(9, 1);\r\n  lcd.print(Teplica.state);\r\n\r\n  lcd.setCursor(11, 1);\r\n  if (Teplica.temperature1 < 100) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print((float)Teplica.temperature1 / 10, 1);\r\n  lcd.print(\"C\");\r\n}\r\n\r\n"}}}






Started logging.

<<<
Content-Length: 3083

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":5620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ILVZ\\Documents\\Arduino\\PJON_Base_Home0401","rootUri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","name":"PJON_Base_Home0401"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 10626

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino","languageId":"cpp","version":1,"text":"/*\r\n   I2C (A4 - SDA, A5 - SCL)\r\n   DS3231 BMP180\r\n\r\n   LCD 1602 4-Pin\r\n   D4-D7 -> D4 - D7\r\n   D8 RS\r\n   D9 E\r\n   D10 Light\r\n\r\n   D12 PJON-Line\r\n*/\r\n#define FOR_i(from, to) for(int i = (from); i < (to); i++)\r\n#define FOR(x, from, to) for (int (x) = (from); (x) < (to); (x)++)\r\n//===========================\r\n#define EVERY_MS(x) \\\r\n  static uint32_t tmr;\\\r\n  bool flag = millis() - tmr >= (x);\\\r\n  if (flag) tmr += (x);\\\r\n  if (flag)\r\n//===========================\r\n\r\n#define BARIER_PIN 3\r\n#define BEEP_PIN   12\r\n#include<Streaming.h>\r\n//\r\n#include <RCSwitch.h>\r\nRCSwitch mySwitch = RCSwitch();\r\n//                                                                     ---------- Timestamp ----------\r\n#include \"timestamp32bits.h\"\r\ntimestamp32bits stamp = timestamp32bits();\r\n//                                                                     ---------- LiquidCrystal ----------\r\n#include <LiquidCrystal.h>\r\nconst int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n//                                                                     ---------- 18B20 ----------\r\n#include <microDS18B20.h>\r\n#define SENSOR1_PIN 16   // пины для термометров\r\nMicroDS18B20 sensor1(SENSOR1_PIN);  // Создаем термометры без адресации\r\n\r\n#include <Wire.h>\r\n//                                                                     ---------- BMP085 ----------\r\n#include <BMP085.h>\r\nBMP085 bmp085 = BMP085();\r\nfloat Temperature18B20;\r\nint32_t Temperature = 0,\r\n        Pressure = 0,\r\n        Altitude = 0;\r\nint32_t buff[10],\r\n        avg_alt;\r\n//                                                                     ---------- 1DS3231 ----------\r\n#include <DS3231_Simple.h>\r\nDS3231_Simple Clock;\r\nDateTime MyDateAndTime;\r\nfloat MyFloatTemperature;\r\n\r\n//                                                                     ---------- PJON ----------\r\n#define PJON_PIN 15\r\n// АДРЕСА В СЕТИ СВОЙ И ГЛАВНЫЙ\r\n#define MAIN_DEV_ADR 10\r\n\r\n#define TEPL_DEV_ADR 15\r\n#define TEPL_DEV_ADR_DUBLE 16\r\n\r\n#define BARIER_DEV_ADR 20\r\n\r\n#include <PJONSoftwareBitBang.h>\r\n\r\nPJONSoftwareBitBang bus(MAIN_DEV_ADR);\r\n\r\nstruct {// Структурав для передачи времени по сети\r\n  char id;\r\n  uint32_t UTS;\r\n}  now_time;\r\n\r\nstruct {// Структура СОСТОЯНИЕ ТЕПЛИЦЫ\r\n  const char id = 'T';\r\n  int temperature1;\r\n  int temperature2;\r\n  int temperature3;\r\n  int hmd1;\r\n  int hmd2;\r\n  int hmd3;\r\n  char state = 'N';\r\n}  Teplica;\r\n//-----------------------------------------------------------\r\nstruct {\r\n  uint8_t f = 0;\r\n  uint8_t count = 0;\r\n  uint8_t numPattern = 0;\r\n  uint16_t pattern[4] = {0B1101101010101101,\r\n                         0B1010101010101010,\r\n                         0B1001010010010100,\r\n                         0B0000000010101010\r\n                        };\r\n\r\n} Sbeep;\r\nuint32_t beepTimer;\r\nbool barierF;\r\n\r\nint8_t beep(int8_t);\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- SETUP ---------\r\n//-----------------------------------------------------------------------------------------------\r\nvoid setup() {\r\n  pinMode(BARIER_PIN,INPUT_PULLUP );\r\n  pinMode(BEEP_PIN, OUTPUT);\r\n  PJON_init();\r\n\r\n  Wire.begin();\r\n  delay(500);\r\n  bmp085.init();\r\n\r\n  Clock.begin();\r\n\r\n  // LCD LightЗшт\r\n  digitalWrite(10, 100);\r\n  lcd.begin(16, 2);\r\n\r\n  sensor1.setResolution(12);\r\n  sensor1.requestTemp();\r\n\r\n  mySwitch.enableTransmit(11);\r\n  mySwitch.setPulseLength(320);\r\n  mySwitch.setRepeatTransmit(6);\r\n\r\n  Serial.begin(115200);\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- LOOP ----------\r\n//-----------------------------------------------------------------------------------------------\r\n#define PERIOD 10000\r\nvoid loop() {\r\n  { // изолируем в блоке, макрос EVERY_MS\r\n    EVERY_MS(PERIOD) {\r\n      Temperature18B20 = sensor1.getTemp();    \r\n      sensor1.requestTemp();// Запрашиваем преобразование температуры\r\n\r\n      bmp085.getPressure(&Pressure);\r\n\r\n      MyDateAndTime = Clock.read();\r\n      MyFloatTemperature   = Clock.getTemperatureFloat(); // температура в корпусе (кристалл часов)\r\n\r\n      TimeMeteoToLCD();\r\n    }\r\n  }\r\n  //\r\n  {// изолируем в блоке, макрос EVERY_MS\r\n#define BARIER_PERIOD 50 // период опроса барьера\r\n#define TRESHOLD 4 // сколько опросов должны дать положительный результат (200-250 миллисекунд)\r\n EVERY_MS(BARIER_PERIOD) { testBarier(); }\r\n  }\r\n  // Музыкальный автомат\r\n  playBeep();\r\n  // работа с шиной\r\n  bus.update();\r\n  bus.receive(1000);\r\n}\r\n/*\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n*/\r\n/*\r\n// Опрашиваем с частотой периода\r\nstatic bool flag = true/false;\r\nstatic uint32_t tmr;\r\nif(state && flag && millis() - tmr > PERIOD)\r\n{\r\n  flag = false;\r\n  tmr = millis();\r\n}\r\n*/\r\n//---------------------------------------------------------------------------------------------------\r\nvoid testBarier() {\r\n  static byte barierTst = 0;\r\n  static uint32_t tmr;\r\n  if(millis() - tmr > BARIER_PERIOD) {\r\n    tmr = millis();\r\n    if(digitalRead(BARIER_PIN) && barierF == false) {\r\n      if(++barierTst >= TRESHOLD){\r\n        barierF = true;\r\n        barierTst = 0;\r\n        mySwitch.send(15755001, 24);\r\n        beep(1);\r\n      }\r\n    }\r\n    if(!digitalRead(BARIER_PIN)) {\r\n      barierTst = 0;\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid PJON_init() {\r\n  bus.set_receiver(receiver_function);\r\n  bus.strategy.set_pin(PJON_PIN);\r\n  bus.begin();\r\n  //\r\n  Serial.print(\"PJON - Sender's device id: \");\r\n  Serial.print(bus.device_id());\r\n  Serial.println(\" DS18B20 tempC cyclical record sending...\");\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n/****************************************\r\n    ПП ЧТЕНИЯ ДАННЫХ ИЗ СЕТИ PJON\r\n ****************************************/\r\nvoid receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &info) {\r\n  switch ((char)payload[0]) {\r\n    case 'R': {\r\n        now_time.UTS = stamp.timestamp(MyDateAndTime.Year, MyDateAndTime.Month, MyDateAndTime.Day, MyDateAndTime.Hour, MyDateAndTime.Minute, MyDateAndTime.Second);\r\n        bus.reply(&now_time, sizeof(now_time));\r\n        Serial.println(\"Request Time\");\r\n        Serial.print(\" Time Sinhronization from UTS   \");\r\n        Serial.print(now_time.UTS);\r\n        Serial.println();\r\n        break;\r\n      }\r\n\r\n    case 'T': {\r\n        memcpy(&Teplica, payload, sizeof(Teplica));\r\n        Serial << endl << \"Teplica_temp \" << (float)Teplica.temperature1 / 10 << \" state \" << Teplica.state << endl;\r\n        break;\r\n      }\r\n\r\n    default:\r\n      Serial.print(\"TX id: \");\r\n      Serial.print(info.tx.id);\r\n      Serial.print(\" RX id: \");\r\n      Serial.print(info.rx.id);\r\n      Serial.print(\" Payload[0] = \");\r\n      Serial.println((char)payload[0]);\r\n      break;\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid LCD2Digit(int d) {\r\n  if (d < 10) {\r\n    lcd.print(\"0\");\r\n  }\r\n  lcd.print(d);\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid serial2Digit(int d) {\r\n  if (d < 10) {\r\n    Serial.print(\"0\");\r\n  }\r\n  Serial.print(d);\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nint8_t beep(int8_t sp = 0) {\r\n  if (Sbeep.count) {\r\n    return Sbeep.count;\r\n  } else {\r\n    Sbeep.count = 16;\r\n    Sbeep.numPattern = sp;\r\n    Sbeep.f = 1;\r\n    return 0;\r\n  }\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nvoid playBeep() {\r\n  if (millis() >= beepTimer && Sbeep.f) {\r\n    beepTimer = millis() + 100;\r\n\r\n    if (Sbeep.count--) {\r\n      if ((Sbeep.pattern[Sbeep.numPattern] >> Sbeep.count) & 1) {\r\n        digitalWrite(BEEP_PIN, 1);\r\n        Serial.print(\"+\");\r\n      } else {\r\n        digitalWrite(BEEP_PIN, 0);\r\n        Serial.print(\"-\");\r\n      }\r\n    } else {\r\n      barierF = false;\r\n      Sbeep.count = Sbeep.f = 0;  // Счётчик тактов пуст. Отыграли своё\r\n      digitalWrite(BEEP_PIN, 0);\r\n        Serial.println();\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid TimeMeteoToLCD()\r\n{\r\n // line ONE\r\n // TIME\r\n  lcd.setCursor(0, 0);\r\n  LCD2Digit(MyDateAndTime.Hour);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Minute);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Second);\r\n\r\n  lcd.setCursor(11, 0);\r\n  if (Temperature18B20 < 10) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print(Temperature18B20 + 0.05, 1);\r\n  lcd.print(\"C\");\r\n\r\n// line TWO\r\n  lcd.setCursor(0, 1);\r\n  lcd.println(\"   Hp   s      \");\r\n  lcd.setCursor(0, 1);\r\n  lcd.print(Pressure / 100);\r\n\r\n  lcd.setCursor(9, 1);\r\n  lcd.print(Teplica.state);\r\n\r\n  lcd.setCursor(11, 1);\r\n  if (Teplica.temperature1 < 100) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print((float)Teplica.temperature1 / 10, 1);\r\n  lcd.print(\"C\");\r\n}\r\n\r\n"}}}






Started logging.

<<<
Content-Length: 3083

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":5620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ILVZ\\Documents\\Arduino\\PJON_Base_Home0401","rootUri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","name":"PJON_Base_Home0401"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 10626

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino","languageId":"cpp","version":1,"text":"/*\r\n   I2C (A4 - SDA, A5 - SCL)\r\n   DS3231 BMP180\r\n\r\n   LCD 1602 4-Pin\r\n   D4-D7 -> D4 - D7\r\n   D8 RS\r\n   D9 E\r\n   D10 Light\r\n\r\n   D12 PJON-Line\r\n*/\r\n#define FOR_i(from, to) for(int i = (from); i < (to); i++)\r\n#define FOR(x, from, to) for (int (x) = (from); (x) < (to); (x)++)\r\n//===========================\r\n#define EVERY_MS(x) \\\r\n  static uint32_t tmr;\\\r\n  bool flag = millis() - tmr >= (x);\\\r\n  if (flag) tmr += (x);\\\r\n  if (flag)\r\n//===========================\r\n\r\n#define BARIER_PIN 3\r\n#define BEEP_PIN   12\r\n#include<Streaming.h>\r\n//\r\n#include <RCSwitch.h>\r\nRCSwitch mySwitch = RCSwitch();\r\n//                                                                     ---------- Timestamp ----------\r\n#include \"timestamp32bits.h\"\r\ntimestamp32bits stamp = timestamp32bits();\r\n//                                                                     ---------- LiquidCrystal ----------\r\n#include <LiquidCrystal.h>\r\nconst int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n//                                                                     ---------- 18B20 ----------\r\n#include <microDS18B20.h>\r\n#define SENSOR1_PIN 16   // пины для термометров\r\nMicroDS18B20 sensor1(SENSOR1_PIN);  // Создаем термометры без адресации\r\n\r\n#include <Wire.h>\r\n//                                                                     ---------- BMP085 ----------\r\n#include <BMP085.h>\r\nBMP085 bmp085 = BMP085();\r\nfloat Temperature18B20;\r\nint32_t Temperature = 0,\r\n        Pressure = 0,\r\n        Altitude = 0;\r\nint32_t buff[10],\r\n        avg_alt;\r\n//                                                                     ---------- 1DS3231 ----------\r\n#include <DS3231_Simple.h>\r\nDS3231_Simple Clock;\r\nDateTime MyDateAndTime;\r\nfloat MyFloatTemperature;\r\n\r\n//                                                                     ---------- PJON ----------\r\n#define PJON_PIN 15\r\n// АДРЕСА В СЕТИ СВОЙ И ГЛАВНЫЙ\r\n#define MAIN_DEV_ADR 10\r\n\r\n#define TEPL_DEV_ADR 15\r\n#define TEPL_DEV_ADR_DUBLE 16\r\n\r\n#define BARIER_DEV_ADR 20\r\n\r\n#include <PJONSoftwareBitBang.h>\r\n\r\nPJONSoftwareBitBang bus(MAIN_DEV_ADR);\r\n\r\nstruct {// Структурав для передачи времени по сети\r\n  char id;\r\n  uint32_t UTS;\r\n}  now_time;\r\n\r\nstruct {// Структура СОСТОЯНИЕ ТЕПЛИЦЫ\r\n  const char id = 'T';\r\n  int temperature1;\r\n  int temperature2;\r\n  int temperature3;\r\n  int hmd1;\r\n  int hmd2;\r\n  int hmd3;\r\n  char state = 'N';\r\n}  Teplica;\r\n//-----------------------------------------------------------\r\nstruct {\r\n  uint8_t f = 0;\r\n  uint8_t count = 0;\r\n  uint8_t numPattern = 0;\r\n  uint16_t pattern[4] = {0B1101101010101101,\r\n                         0B1010101010101010,\r\n                         0B1001010010010100,\r\n                         0B0000000010101010\r\n                        };\r\n\r\n} Sbeep;\r\nuint32_t beepTimer;\r\nbool barierF;\r\n\r\nint8_t beep(int8_t);\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- SETUP ---------\r\n//-----------------------------------------------------------------------------------------------\r\nvoid setup() {\r\n  pinMode(BARIER_PIN,INPUT_PULLUP );\r\n  pinMode(BEEP_PIN, OUTPUT);\r\n  PJON_init();\r\n\r\n  Wire.begin();\r\n  delay(500);\r\n  bmp085.init();\r\n\r\n  Clock.begin();\r\n\r\n  // LCD LightЗшт\r\n  digitalWrite(10, 100);\r\n  lcd.begin(16, 2);\r\n\r\n  sensor1.setResolution(12);\r\n  sensor1.requestTemp();\r\n\r\n  mySwitch.enableTransmit(11);\r\n  mySwitch.setPulseLength(320);\r\n  mySwitch.setRepeatTransmit(6);\r\n\r\n  Serial.begin(115200);\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- LOOP ----------\r\n//-----------------------------------------------------------------------------------------------\r\n#define PERIOD 10000\r\nvoid loop() {\r\n  { // изолируем в блоке, макрос EVERY_MS\r\n    EVERY_MS(PERIOD) {\r\n      Temperature18B20 = sensor1.getTemp();    \r\n      sensor1.requestTemp();// Запрашиваем преобразование температуры\r\n\r\n      bmp085.getPressure(&Pressure);\r\n\r\n      MyDateAndTime = Clock.read();\r\n      MyFloatTemperature   = Clock.getTemperatureFloat(); // температура в корпусе (кристалл часов)\r\n\r\n      TimeMeteoToLCD();\r\n    }\r\n  }\r\n  //\r\n  {// изолируем в блоке, макрос EVERY_MS\r\n#define BARIER_PERIOD 50 // период опроса барьера\r\n#define TRESHOLD 4 // сколько опросов должны дать положительный результат (200-250 миллисекунд)\r\n EVERY_MS(BARIER_PERIOD) { testBarier(); }\r\n  }\r\n  // Музыкальный автомат\r\n  playBeep();\r\n  // работа с шиной\r\n  bus.update();\r\n  bus.receive(1000);\r\n}\r\n/*\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n*/\r\n/*\r\n// Опрашиваем с частотой периода\r\nstatic bool flag = true/false;\r\nstatic uint32_t tmr;\r\nif(state && flag && millis() - tmr > PERIOD)\r\n{\r\n  flag = false;\r\n  tmr = millis();\r\n}\r\n*/\r\n//---------------------------------------------------------------------------------------------------\r\nvoid testBarier() {\r\n  static byte barierTst = 0;\r\n  static uint32_t tmr;\r\n  if(millis() - tmr > BARIER_PERIOD) {\r\n    tmr = millis();\r\n    if(digitalRead(BARIER_PIN) && barierF == false) {\r\n      if(++barierTst >= TRESHOLD){\r\n        barierF = true;\r\n        barierTst = 0;\r\n        mySwitch.send(15755001, 24);\r\n        beep(1);\r\n      }\r\n    }\r\n    if(!digitalRead(BARIER_PIN)) {\r\n      barierTst = 0;\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid PJON_init() {\r\n  bus.set_receiver(receiver_function);\r\n  bus.strategy.set_pin(PJON_PIN);\r\n  bus.begin();\r\n  //\r\n  Serial.print(\"PJON - Sender's device id: \");\r\n  Serial.print(bus.device_id());\r\n  Serial.println(\" DS18B20 tempC cyclical record sending...\");\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n/****************************************\r\n    ПП ЧТЕНИЯ ДАННЫХ ИЗ СЕТИ PJON\r\n ****************************************/\r\nvoid receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &info) {\r\n  switch ((char)payload[0]) {\r\n    case 'R': {\r\n        now_time.UTS = stamp.timestamp(MyDateAndTime.Year, MyDateAndTime.Month, MyDateAndTime.Day, MyDateAndTime.Hour, MyDateAndTime.Minute, MyDateAndTime.Second);\r\n        bus.reply(&now_time, sizeof(now_time));\r\n        Serial.println(\"Request Time\");\r\n        Serial.print(\" Time Sinhronization from UTS   \");\r\n        Serial.print(now_time.UTS);\r\n        Serial.println();\r\n        break;\r\n      }\r\n\r\n    case 'T': {\r\n        memcpy(&Teplica, payload, sizeof(Teplica));\r\n        Serial << endl << \"Teplica_temp \" << (float)Teplica.temperature1 / 10 << \" state \" << Teplica.state << endl;\r\n        break;\r\n      }\r\n\r\n    default:\r\n      Serial.print(\"TX id: \");\r\n      Serial.print(info.tx.id);\r\n      Serial.print(\" RX id: \");\r\n      Serial.print(info.rx.id);\r\n      Serial.print(\" Payload[0] = \");\r\n      Serial.println((char)payload[0]);\r\n      break;\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid LCD2Digit(int d) {\r\n  if (d < 10) {\r\n    lcd.print(\"0\");\r\n  }\r\n  lcd.print(d);\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid serial2Digit(int d) {\r\n  if (d < 10) {\r\n    Serial.print(\"0\");\r\n  }\r\n  Serial.print(d);\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nint8_t beep(int8_t sp = 0) {\r\n  if (Sbeep.count) {\r\n    return Sbeep.count;\r\n  } else {\r\n    Sbeep.count = 16;\r\n    Sbeep.numPattern = sp;\r\n    Sbeep.f = 1;\r\n    return 0;\r\n  }\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nvoid playBeep() {\r\n  if (millis() >= beepTimer && Sbeep.f) {\r\n    beepTimer = millis() + 100;\r\n\r\n    if (Sbeep.count--) {\r\n      if ((Sbeep.pattern[Sbeep.numPattern] >> Sbeep.count) & 1) {\r\n        digitalWrite(BEEP_PIN, 1);\r\n        Serial.print(\"+\");\r\n      } else {\r\n        digitalWrite(BEEP_PIN, 0);\r\n        Serial.print(\"-\");\r\n      }\r\n    } else {\r\n      barierF = false;\r\n      Sbeep.count = Sbeep.f = 0;  // Счётчик тактов пуст. Отыграли своё\r\n      digitalWrite(BEEP_PIN, 0);\r\n        Serial.println();\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid TimeMeteoToLCD()\r\n{\r\n // line ONE\r\n // TIME\r\n  lcd.setCursor(0, 0);\r\n  LCD2Digit(MyDateAndTime.Hour);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Minute);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Second);\r\n\r\n  lcd.setCursor(11, 0);\r\n  if (Temperature18B20 < 10) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print(Temperature18B20 + 0.05, 1);\r\n  lcd.print(\"C\");\r\n\r\n// line TWO\r\n  lcd.setCursor(0, 1);\r\n  lcd.println(\"   Hp   s      \");\r\n  lcd.setCursor(0, 1);\r\n  lcd.print(Pressure / 100);\r\n\r\n  lcd.setCursor(9, 1);\r\n  lcd.print(Teplica.state);\r\n\r\n  lcd.setCursor(11, 1);\r\n  if (Teplica.temperature1 < 100) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print((float)Teplica.temperature1 / 10, 1);\r\n  lcd.print(\"C\");\r\n}\r\n\r\n"}}}






Started logging.

<<<
Content-Length: 3083

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":5620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ILVZ\\Documents\\Arduino\\PJON_Base_Home0401","rootUri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","name":"PJON_Base_Home0401"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 10626

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino","languageId":"cpp","version":1,"text":"/*\r\n   I2C (A4 - SDA, A5 - SCL)\r\n   DS3231 BMP180\r\n\r\n   LCD 1602 4-Pin\r\n   D4-D7 -> D4 - D7\r\n   D8 RS\r\n   D9 E\r\n   D10 Light\r\n\r\n   D12 PJON-Line\r\n*/\r\n#define FOR_i(from, to) for(int i = (from); i < (to); i++)\r\n#define FOR(x, from, to) for (int (x) = (from); (x) < (to); (x)++)\r\n//===========================\r\n#define EVERY_MS(x) \\\r\n  static uint32_t tmr;\\\r\n  bool flag = millis() - tmr >= (x);\\\r\n  if (flag) tmr += (x);\\\r\n  if (flag)\r\n//===========================\r\n\r\n#define BARIER_PIN 3\r\n#define BEEP_PIN   12\r\n#include<Streaming.h>\r\n//\r\n#include <RCSwitch.h>\r\nRCSwitch mySwitch = RCSwitch();\r\n//                                                                     ---------- Timestamp ----------\r\n#include \"timestamp32bits.h\"\r\ntimestamp32bits stamp = timestamp32bits();\r\n//                                                                     ---------- LiquidCrystal ----------\r\n#include <LiquidCrystal.h>\r\nconst int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n//                                                                     ---------- 18B20 ----------\r\n#include <microDS18B20.h>\r\n#define SENSOR1_PIN 16   // пины для термометров\r\nMicroDS18B20 sensor1(SENSOR1_PIN);  // Создаем термометры без адресации\r\n\r\n#include <Wire.h>\r\n//                                                                     ---------- BMP085 ----------\r\n#include <BMP085.h>\r\nBMP085 bmp085 = BMP085();\r\nfloat Temperature18B20;\r\nint32_t Temperature = 0,\r\n        Pressure = 0,\r\n        Altitude = 0;\r\nint32_t buff[10],\r\n        avg_alt;\r\n//                                                                     ---------- 1DS3231 ----------\r\n#include <DS3231_Simple.h>\r\nDS3231_Simple Clock;\r\nDateTime MyDateAndTime;\r\nfloat MyFloatTemperature;\r\n\r\n//                                                                     ---------- PJON ----------\r\n#define PJON_PIN 15\r\n// АДРЕСА В СЕТИ СВОЙ И ГЛАВНЫЙ\r\n#define MAIN_DEV_ADR 10\r\n\r\n#define TEPL_DEV_ADR 15\r\n#define TEPL_DEV_ADR_DUBLE 16\r\n\r\n#define BARIER_DEV_ADR 20\r\n\r\n#include <PJONSoftwareBitBang.h>\r\n\r\nPJONSoftwareBitBang bus(MAIN_DEV_ADR);\r\n\r\nstruct {// Структурав для передачи времени по сети\r\n  char id;\r\n  uint32_t UTS;\r\n}  now_time;\r\n\r\nstruct {// Структура СОСТОЯНИЕ ТЕПЛИЦЫ\r\n  const char id = 'T';\r\n  int temperature1;\r\n  int temperature2;\r\n  int temperature3;\r\n  int hmd1;\r\n  int hmd2;\r\n  int hmd3;\r\n  char state = 'N';\r\n}  Teplica;\r\n//-----------------------------------------------------------\r\nstruct {\r\n  uint8_t f = 0;\r\n  uint8_t count = 0;\r\n  uint8_t numPattern = 0;\r\n  uint16_t pattern[4] = {0B1101101010101101,\r\n                         0B1010101010101010,\r\n                         0B1001010010010100,\r\n                         0B0000000010101010\r\n                        };\r\n\r\n} Sbeep;\r\nuint32_t beepTimer;\r\nbool barierF;\r\n\r\nint8_t beep(int8_t);\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- SETUP ---------\r\n//-----------------------------------------------------------------------------------------------\r\nvoid setup() {\r\n  pinMode(BARIER_PIN,INPUT_PULLUP );\r\n  pinMode(BEEP_PIN, OUTPUT);\r\n  PJON_init();\r\n\r\n  Wire.begin();\r\n  delay(500);\r\n  bmp085.init();\r\n\r\n  Clock.begin();\r\n\r\n  // LCD LightЗшт\r\n  digitalWrite(10, 100);\r\n  lcd.begin(16, 2);\r\n\r\n  sensor1.setResolution(12);\r\n  sensor1.requestTemp();\r\n\r\n  mySwitch.enableTransmit(11);\r\n  mySwitch.setPulseLength(320);\r\n  mySwitch.setRepeatTransmit(6);\r\n\r\n  Serial.begin(115200);\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- LOOP ----------\r\n//-----------------------------------------------------------------------------------------------\r\n#define PERIOD 10000\r\nvoid loop() {\r\n  { // изолируем в блоке, макрос EVERY_MS\r\n    EVERY_MS(PERIOD) {\r\n      Temperature18B20 = sensor1.getTemp();    \r\n      sensor1.requestTemp();// Запрашиваем преобразование температуры\r\n\r\n      bmp085.getPressure(&Pressure);\r\n\r\n      MyDateAndTime = Clock.read();\r\n      MyFloatTemperature   = Clock.getTemperatureFloat(); // температура в корпусе (кристалл часов)\r\n\r\n      TimeMeteoToLCD();\r\n    }\r\n  }\r\n  //\r\n  {// изолируем в блоке, макрос EVERY_MS\r\n#define BARIER_PERIOD 50 // период опроса барьера\r\n#define TRESHOLD 4 // сколько опросов должны дать положительный результат (200-250 миллисекунд)\r\n EVERY_MS(BARIER_PERIOD) { testBarier(); }\r\n  }\r\n  // Музыкальный автомат\r\n  playBeep();\r\n  // работа с шиной\r\n  bus.update();\r\n  bus.receive(1000);\r\n}\r\n/*\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n*/\r\n/*\r\n// Опрашиваем с частотой периода\r\nstatic bool flag = true/false;\r\nstatic uint32_t tmr;\r\nif(state && flag && millis() - tmr > PERIOD)\r\n{\r\n  flag = false;\r\n  tmr = millis();\r\n}\r\n*/\r\n//---------------------------------------------------------------------------------------------------\r\nvoid testBarier() {\r\n  static byte barierTst = 0;\r\n  static uint32_t tmr;\r\n  if(millis() - tmr > BARIER_PERIOD) {\r\n    tmr = millis();\r\n    if(digitalRead(BARIER_PIN) && barierF == false) {\r\n      if(++barierTst >= TRESHOLD){\r\n        barierF = true;\r\n        barierTst = 0;\r\n        mySwitch.send(15755001, 24);\r\n        beep(1);\r\n      }\r\n    }\r\n    if(!digitalRead(BARIER_PIN)) {\r\n      barierTst = 0;\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid PJON_init() {\r\n  bus.set_receiver(receiver_function);\r\n  bus.strategy.set_pin(PJON_PIN);\r\n  bus.begin();\r\n  //\r\n  Serial.print(\"PJON - Sender's device id: \");\r\n  Serial.print(bus.device_id());\r\n  Serial.println(\" DS18B20 tempC cyclical record sending...\");\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n/****************************************\r\n    ПП ЧТЕНИЯ ДАННЫХ ИЗ СЕТИ PJON\r\n ****************************************/\r\nvoid receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &info) {\r\n  switch ((char)payload[0]) {\r\n    case 'R': {\r\n        now_time.UTS = stamp.timestamp(MyDateAndTime.Year, MyDateAndTime.Month, MyDateAndTime.Day, MyDateAndTime.Hour, MyDateAndTime.Minute, MyDateAndTime.Second);\r\n        bus.reply(&now_time, sizeof(now_time));\r\n        Serial.println(\"Request Time\");\r\n        Serial.print(\" Time Sinhronization from UTS   \");\r\n        Serial.print(now_time.UTS);\r\n        Serial.println();\r\n        break;\r\n      }\r\n\r\n    case 'T': {\r\n        memcpy(&Teplica, payload, sizeof(Teplica));\r\n        Serial << endl << \"Teplica_temp \" << (float)Teplica.temperature1 / 10 << \" state \" << Teplica.state << endl;\r\n        break;\r\n      }\r\n\r\n    default:\r\n      Serial.print(\"TX id: \");\r\n      Serial.print(info.tx.id);\r\n      Serial.print(\" RX id: \");\r\n      Serial.print(info.rx.id);\r\n      Serial.print(\" Payload[0] = \");\r\n      Serial.println((char)payload[0]);\r\n      break;\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid LCD2Digit(int d) {\r\n  if (d < 10) {\r\n    lcd.print(\"0\");\r\n  }\r\n  lcd.print(d);\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid serial2Digit(int d) {\r\n  if (d < 10) {\r\n    Serial.print(\"0\");\r\n  }\r\n  Serial.print(d);\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nint8_t beep(int8_t sp = 0) {\r\n  if (Sbeep.count) {\r\n    return Sbeep.count;\r\n  } else {\r\n    Sbeep.count = 16;\r\n    Sbeep.numPattern = sp;\r\n    Sbeep.f = 1;\r\n    return 0;\r\n  }\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nvoid playBeep() {\r\n  if (millis() >= beepTimer && Sbeep.f) {\r\n    beepTimer = millis() + 100;\r\n\r\n    if (Sbeep.count--) {\r\n      if ((Sbeep.pattern[Sbeep.numPattern] >> Sbeep.count) & 1) {\r\n        digitalWrite(BEEP_PIN, 1);\r\n        Serial.print(\"+\");\r\n      } else {\r\n        digitalWrite(BEEP_PIN, 0);\r\n        Serial.print(\"-\");\r\n      }\r\n    } else {\r\n      barierF = false;\r\n      Sbeep.count = Sbeep.f = 0;  // Счётчик тактов пуст. Отыграли своё\r\n      digitalWrite(BEEP_PIN, 0);\r\n        Serial.println();\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid TimeMeteoToLCD()\r\n{\r\n // line ONE\r\n // TIME\r\n  lcd.setCursor(0, 0);\r\n  LCD2Digit(MyDateAndTime.Hour);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Minute);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Second);\r\n\r\n  lcd.setCursor(11, 0);\r\n  if (Temperature18B20 < 10) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print(Temperature18B20 + 0.05, 1);\r\n  lcd.print(\"C\");\r\n\r\n// line TWO\r\n  lcd.setCursor(0, 1);\r\n  lcd.println(\"   Hp   s      \");\r\n  lcd.setCursor(0, 1);\r\n  lcd.print(Pressure / 100);\r\n\r\n  lcd.setCursor(9, 1);\r\n  lcd.print(Teplica.state);\r\n\r\n  lcd.setCursor(11, 1);\r\n  if (Teplica.temperature1 < 100) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print((float)Teplica.temperature1 / 10, 1);\r\n  lcd.print(\"C\");\r\n}\r\n\r\n"}}}






Started logging.

<<<
Content-Length: 3083

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":5620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ILVZ\\Documents\\Arduino\\PJON_Base_Home0401","rootUri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401","name":"PJON_Base_Home0401"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 10626

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino","languageId":"cpp","version":1,"text":"/*\r\n   I2C (A4 - SDA, A5 - SCL)\r\n   DS3231 BMP180\r\n\r\n   LCD 1602 4-Pin\r\n   D4-D7 -> D4 - D7\r\n   D8 RS\r\n   D9 E\r\n   D10 Light\r\n\r\n   D12 PJON-Line\r\n*/\r\n#define FOR_i(from, to) for(int i = (from); i < (to); i++)\r\n#define FOR(x, from, to) for (int (x) = (from); (x) < (to); (x)++)\r\n//===========================\r\n#define EVERY_MS(x) \\\r\n  static uint32_t tmr;\\\r\n  bool flag = millis() - tmr >= (x);\\\r\n  if (flag) tmr += (x);\\\r\n  if (flag)\r\n//===========================\r\n\r\n#define BARIER_PIN 3\r\n#define BEEP_PIN   12\r\n#include<Streaming.h>\r\n//\r\n#include <RCSwitch.h>\r\nRCSwitch mySwitch = RCSwitch();\r\n//                                                                     ---------- Timestamp ----------\r\n#include \"timestamp32bits.h\"\r\ntimestamp32bits stamp = timestamp32bits();\r\n//                                                                     ---------- LiquidCrystal ----------\r\n#include <LiquidCrystal.h>\r\nconst int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n//                                                                     ---------- 18B20 ----------\r\n#include <microDS18B20.h>\r\n#define SENSOR1_PIN 16   // пины для термометров\r\nMicroDS18B20 sensor1(SENSOR1_PIN);  // Создаем термометры без адресации\r\n\r\n#include <Wire.h>\r\n//                                                                     ---------- BMP085 ----------\r\n#include <BMP085.h>\r\nBMP085 bmp085 = BMP085();\r\nfloat Temperature18B20;\r\nint32_t Temperature = 0,\r\n        Pressure = 0,\r\n        Altitude = 0;\r\nint32_t buff[10],\r\n        avg_alt;\r\n//                                                                     ---------- 1DS3231 ----------\r\n#include <DS3231_Simple.h>\r\nDS3231_Simple Clock;\r\nDateTime MyDateAndTime;\r\nfloat MyFloatTemperature;\r\n\r\n//                                                                     ---------- PJON ----------\r\n#define PJON_PIN 15\r\n// АДРЕСА В СЕТИ СВОЙ И ГЛАВНЫЙ\r\n#define MAIN_DEV_ADR 10\r\n\r\n#define TEPL_DEV_ADR 15\r\n#define TEPL_DEV_ADR_DUBLE 16\r\n\r\n#define BARIER_DEV_ADR 20\r\n\r\n#include <PJONSoftwareBitBang.h>\r\n\r\nPJONSoftwareBitBang bus(MAIN_DEV_ADR);\r\n\r\nstruct {// Структурав для передачи времени по сети\r\n  char id;\r\n  uint32_t UTS;\r\n}  now_time;\r\n\r\nstruct {// Структура СОСТОЯНИЕ ТЕПЛИЦЫ\r\n  const char id = 'T';\r\n  int temperature1;\r\n  int temperature2;\r\n  int temperature3;\r\n  int hmd1;\r\n  int hmd2;\r\n  int hmd3;\r\n  char state = 'N';\r\n}  Teplica;\r\n//-----------------------------------------------------------\r\nstruct {\r\n  uint8_t f = 0;\r\n  uint8_t count = 0;\r\n  uint8_t numPattern = 0;\r\n  uint16_t pattern[4] = {0B1101101010101101,\r\n                         0B1010101010101010,\r\n                         0B1001010010010100,\r\n                         0B0000000010101010\r\n                        };\r\n\r\n} Sbeep;\r\nuint32_t beepTimer;\r\nbool barierF;\r\n\r\nint8_t beep(int8_t);\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- SETUP ---------\r\n//-----------------------------------------------------------------------------------------------\r\nvoid setup() {\r\n  pinMode(BARIER_PIN,INPUT_PULLUP );\r\n  pinMode(BEEP_PIN, OUTPUT);\r\n  PJON_init();\r\n\r\n  Wire.begin();\r\n  delay(500);\r\n  bmp085.init();\r\n\r\n  Clock.begin();\r\n\r\n  // LCD LightЗшт\r\n  digitalWrite(10, 100);\r\n  lcd.begin(16, 2);\r\n\r\n  sensor1.setResolution(12);\r\n  sensor1.requestTemp();\r\n\r\n  mySwitch.enableTransmit(11);\r\n  mySwitch.setPulseLength(320);\r\n  mySwitch.setRepeatTransmit(6);\r\n\r\n  Serial.begin(115200);\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------- LOOP ----------\r\n//-----------------------------------------------------------------------------------------------\r\n#define PERIOD 10000\r\nvoid loop() {\r\n  { // изолируем в блоке, макрос EVERY_MS\r\n    EVERY_MS(PERIOD) {\r\n      Temperature18B20 = sensor1.getTemp();    \r\n      sensor1.requestTemp();// Запрашиваем преобразование температуры\r\n\r\n      bmp085.getPressure(&Pressure);\r\n\r\n      MyDateAndTime = Clock.read();\r\n      MyFloatTemperature   = Clock.getTemperatureFloat(); // температура в корпусе (кристалл часов)\r\n\r\n      TimeMeteoToLCD();\r\n    }\r\n  }\r\n  //\r\n  {// изолируем в блоке, макрос EVERY_MS\r\n#define BARIER_PERIOD 50 // период опроса барьера\r\n#define TRESHOLD 4 // сколько опросов должны дать положительный результат (200-250 миллисекунд)\r\n EVERY_MS(BARIER_PERIOD) { testBarier(); }\r\n  }\r\n  // Музыкальный автомат\r\n  playBeep();\r\n  // работа с шиной\r\n  bus.update();\r\n  bus.receive(1000);\r\n}\r\n/*\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n   -------------------------------------------------------------------\r\n*/\r\n/*\r\n// Опрашиваем с частотой периода\r\nstatic bool flag = true/false;\r\nstatic uint32_t tmr;\r\nif(state && flag && millis() - tmr > PERIOD)\r\n{\r\n  flag = false;\r\n  tmr = millis();\r\n}\r\n*/\r\n//---------------------------------------------------------------------------------------------------\r\nvoid testBarier() {\r\n  static byte barierTst = 0;\r\n  static uint32_t tmr;\r\n  if(millis() - tmr > BARIER_PERIOD) {\r\n    tmr = millis();\r\n    if(digitalRead(BARIER_PIN) && barierF == false) {\r\n      if(++barierTst >= TRESHOLD){\r\n        barierF = true;\r\n        barierTst = 0;\r\n        mySwitch.send(15755001, 24);\r\n        beep(1);\r\n      }\r\n    }\r\n    if(!digitalRead(BARIER_PIN)) {\r\n      barierTst = 0;\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid PJON_init() {\r\n  bus.set_receiver(receiver_function);\r\n  bus.strategy.set_pin(PJON_PIN);\r\n  bus.begin();\r\n  //\r\n  Serial.print(\"PJON - Sender's device id: \");\r\n  Serial.print(bus.device_id());\r\n  Serial.println(\" DS18B20 tempC cyclical record sending...\");\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n/****************************************\r\n    ПП ЧТЕНИЯ ДАННЫХ ИЗ СЕТИ PJON\r\n ****************************************/\r\nvoid receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &info) {\r\n  switch ((char)payload[0]) {\r\n    case 'R': {\r\n        now_time.UTS = stamp.timestamp(MyDateAndTime.Year, MyDateAndTime.Month, MyDateAndTime.Day, MyDateAndTime.Hour, MyDateAndTime.Minute, MyDateAndTime.Second);\r\n        bus.reply(&now_time, sizeof(now_time));\r\n        Serial.println(\"Request Time\");\r\n        Serial.print(\" Time Sinhronization from UTS   \");\r\n        Serial.print(now_time.UTS);\r\n        Serial.println();\r\n        break;\r\n      }\r\n\r\n    case 'T': {\r\n        memcpy(&Teplica, payload, sizeof(Teplica));\r\n        Serial << endl << \"Teplica_temp \" << (float)Teplica.temperature1 / 10 << \" state \" << Teplica.state << endl;\r\n        break;\r\n      }\r\n\r\n    default:\r\n      Serial.print(\"TX id: \");\r\n      Serial.print(info.tx.id);\r\n      Serial.print(\" RX id: \");\r\n      Serial.print(info.rx.id);\r\n      Serial.print(\" Payload[0] = \");\r\n      Serial.println((char)payload[0]);\r\n      break;\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid LCD2Digit(int d) {\r\n  if (d < 10) {\r\n    lcd.print(\"0\");\r\n  }\r\n  lcd.print(d);\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid serial2Digit(int d) {\r\n  if (d < 10) {\r\n    Serial.print(\"0\");\r\n  }\r\n  Serial.print(d);\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nint8_t beep(int8_t sp = 0) {\r\n  if (Sbeep.count) {\r\n    return Sbeep.count;\r\n  } else {\r\n    Sbeep.count = 16;\r\n    Sbeep.numPattern = sp;\r\n    Sbeep.f = 1;\r\n    return 0;\r\n  }\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\nvoid playBeep() {\r\n  if (millis() >= beepTimer && Sbeep.f) {\r\n    beepTimer = millis() + 100;\r\n\r\n    if (Sbeep.count--) {\r\n      if ((Sbeep.pattern[Sbeep.numPattern] >> Sbeep.count) & 1) {\r\n        digitalWrite(BEEP_PIN, 1);\r\n        Serial.print(\"+\");\r\n      } else {\r\n        digitalWrite(BEEP_PIN, 0);\r\n        Serial.print(\"-\");\r\n      }\r\n    } else {\r\n      barierF = false;\r\n      Sbeep.count = Sbeep.f = 0;  // Счётчик тактов пуст. Отыграли своё\r\n      digitalWrite(BEEP_PIN, 0);\r\n        Serial.println();\r\n    }\r\n  }\r\n}\r\n//---------------------------------------------------------------------------------------------------\r\nvoid TimeMeteoToLCD()\r\n{\r\n // line ONE\r\n // TIME\r\n  lcd.setCursor(0, 0);\r\n  LCD2Digit(MyDateAndTime.Hour);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Minute);\r\n  lcd.print(\":\");\r\n  LCD2Digit(MyDateAndTime.Second);\r\n\r\n  lcd.setCursor(11, 0);\r\n  if (Temperature18B20 < 10) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print(Temperature18B20 + 0.05, 1);\r\n  lcd.print(\"C\");\r\n\r\n// line TWO\r\n  lcd.setCursor(0, 1);\r\n  lcd.println(\"   Hp   s      \");\r\n  lcd.setCursor(0, 1);\r\n  lcd.print(Pressure / 100);\r\n\r\n  lcd.setCursor(9, 1);\r\n  lcd.print(Teplica.state);\r\n\r\n  lcd.setCursor(11, 1);\r\n  if (Teplica.temperature1 < 100) {\r\n    lcd.print(\" \");\r\n  }\r\n  lcd.print((float)Teplica.temperature1 / 10, 1);\r\n  lcd.print(\"C\");\r\n}\r\n\r\n"}}}Content-Length: 282

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ILVZ/Documents/Arduino/PJON_Base_Home0401/PJON_Base_Home0401.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}